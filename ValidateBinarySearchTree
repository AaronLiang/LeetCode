Validate Binary Search TreeAug 31 '122458 / 6867
Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isValidBST(TreeNode root) {
        // Start typing your Java solution below
        // DO NOT write main() function
        return isBST(root, Integer.MIN_VALUE, Integer.MAX_VALUE);
    }
    
public boolean isBST(TreeNode node, int min, int max){
    if (node == null) return true;
    if(node.val < min || node.val > max)// this is important
        return false;
    //Check this node!
    //This algorithm doesn't recurse with null Arguments.
    //When a null is found the method returns true;
    //Look and you will find out.
    /*
     * Checking for Left SubTree
     */
  	
		
		boolean leftIsBST = false;
		if(node.left != null){
			if(node.left.val < node.val ){
				leftIsBST = isBST(node.left, min, node.val-1);//why -1?
			}else {
				leftIsBST = false;
			}
		}else {
			leftIsBST = true;
		}
		
		boolean rightIsBST = false;
		if(node.right != null){
			if(node.right.val > node.val ){
				rightIsBST = isBST(node.right, node.val+1, max);// why +1ï¼Ÿ
			}else{
				rightIsBST = false;
			}
		}else {
			rightIsBST = true;
		}
        
        return leftIsBST && rightIsBST;
	
	}
	
	public boolean checkBST(TreeNode root, int min, int max) {// what's the diff of this method?
	    if(root == null)
			return true;
		if(min < root.val && root.val < max) 
			return checkBST(root.left, min, root.val) && checkBST(root.right, root.val, max);
		else
			return false;
	}
}
