Symmetric TreeSep 24 '122690 / 5581
Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
But the following is not:

    1
   / \
  2   2
   \   \
   3    3
Note:
Bonus points if you could solve it both recursively and iteratively.

confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {//bug free
    public boolean isSymmetric(TreeNode root) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if (root == null) return true;
  	return isST(root.left, root.right);
    }
	
	public boolean isST(TreeNode left, TreeNode right){
		if(left != null && right != null){
			if(left.val == right.val){
				return isST(left.left, right.right) && isST(left.right, right.left);
			}else{
				return false;
			}
		}else if(left == null && right == null){
			return true;
		}else {
			return false;
		}
	}
}
