Word Ladder IIFeb 112390 / 13303
Given two words (start and end), and a dictionary, 
find all shortest transformation sequence(s) from 
start to end, such that:

Only one letter can be changed at a time
Each intermediate word must exist in the dictionary
For example,

Given:
start = "hit"
end = "cog"
dict = ["hot","dot","dog","lot","log"]

Return

  [
    ["hit","hot","dot","dog","cog"],
    ["hit","hot","lot","log","cog"]
  ]
Note:

All words have the same length.
All words contain only lowercase alphabetic characters.



-------------------------------------------------------------------
public class Solution {
    public ArrayList<ArrayList<String>> findLadders(String start, String end, HashSet<String> dict) {
        // Start typing your Java solution below
        // DO NOT write main() function
    ArrayList<ArrayList<String>> results=new ArrayList<ArrayList<String>>(); 
    if(start.length()!=end.length()) return results; 
		Queue<ArrayList<String>> que=new LinkedList<ArrayList<String>>();
		ArrayList<String> list=new ArrayList<String>(); 
		list.add(start);
		que.add(list);
		int distance=1; 
		int currentNum=0; 
		int nextNum=0; 
        while(!que.isEmpty() && dict.size()>0)
        {
      ArrayList<String> currentList=que.poll(); 
			currentNum--; 
			String current=currentList.get(currentList.size()-1);
			for(int i=0; i<current.length(); i++)
		    {
		        for(char j='a'; j<='z'; j++)
		        {
					if(current.charAt(i)==j) continue; 
					String temp=current.substring(0, i)+j+(i!=current.length()-1? current.substring(i+1):"");
					if(temp.equals(end))
					{
					currentList.add(end);
					results.add(currentList);
					} 
					if(dict.contains(temp))
					{
					ArrayList<String> anotherList=(ArrayList<String>)currentList.clone(); 
					anotherList.add(temp);
					que.add(anotherList);
					nextNum++; 
					}
					}
			}              
			  if(currentNum<=0)
			  {
			  if(results.size()!=0) return results; 
			  currentNum=nextNum; 
			  distance++; 
			  nextNum=0; 
			  }
        }
		return 0; 
    }
}
 
